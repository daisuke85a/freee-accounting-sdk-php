<?php
/**
 * UpdateCompanyParamsDocTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Freee\Accounting
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"\">はじめに</h2>  <ol> <li><a href=\"https://secure.freee.co.jp/\">freee</a>にサインアップします。</li>  <li><a href=\"https://accounts.secure.freee.co.jp/public_api/applications\">アプリケーション一覧</a>から「新しいアプリケーションを登録」します。</li>  <li>アプリケーションの登録が完了すると、Client IDとSecretが取得できます。</li>  <li>ローカルの開発環境でテストする際は、認証用URLを直接リクエストしてAuthorization Codeを取得できます。</li> </ol>  <p>アプリケーションの登録方法や認証方法、またはAPIの活用方法でご不明な点がある場合は<a href=\"https://support.freee.co.jp/hc/ja/sections/115000030743\">ヘルプセンター</a>もご確認ください</p> <hr /> <h2 id=\"_2\">仕様</h2>  <h3 id=\"api\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"_3\">認証方式</h3>  <p><a href=\"http://tools.ietf.org/html/rfc6749\">OAuth2</a>に対応</p>  <ul> <li>Authorization Code Flow (Webアプリ向け)</li>  <li>Implicit Flow (Mobileアプリ向け)</li> </ul>  <h3 id=\"_4\">認証エンドポイント</h3>  <p>https://accounts.secure.freee.co.jp/</p>  <ul> <li>authorize : https://accounts.secure.freee.co.jp/public_api/authorize</li>  <li>token : https://accounts.secure.freee.co.jp/public_api/token</li> </ul>  <h3 id=\"_5\">アクセストークンのリフレッシュ</h3>  <p>認証時に得たrefresh_token を使ってtoken の期限をリフレッシュして新規に発行することが出来ます。</p>  <p>grant_type=refresh_token で https://accounts.secure.freee.co.jp/public_api/token にアクセスすればリフレッシュされます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/token</p>  <p>params: grant_type=refresh_token&amp;client_id=UID&amp;client_secret=SECRET&amp;refresh_token=REFRESH_TOKEN</p>  <p>詳細は<a href=\"https://github.com/applicake/doorkeeper/wiki/Enable-Refresh-Token-Credentials#flow\">refresh_token</a>を参照下さい。</p>  <h3 id=\"_6\">アクセストークンの破棄</h3>  <p>認証時に得たaccess_tokenまたはrefresh_tokenを使って、tokenを破棄することができます。 token=access_tokenまたはtoken=refresh_tokenでhttps://accounts.secure.freee.co.jp/public_api/revokeにアクセスすると破棄されます。token_type_hintでaccess_tokenまたはrefresh_tokenを陽に指定できます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/revoke</p>  <p>params: token=ACCESS_TOKEN</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN</p>  <p>または</p>  <p>params: token=ACCESS_TOKEN&amp;token_type_hint=access_token</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN&amp;token_type_hint=refresh_token</p>  <p>詳細は <a href=\"https://tools.ietf.org/html/rfc7009\">OAuth 2.0 Token revocation</a> をご参照ください。</p>  <h3 id=\"_7\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポート</p>  <h3 id=\"_8\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"_9\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li>  <li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre> <hr /> <h2 id=\"_10\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.
 *
 * The version of the OpenAPI document: v1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Freee\Accounting\Model;

use \ArrayAccess;
use \Freee\Accounting\ObjectSerializer;

/**
 * UpdateCompanyParamsDocTemplate Class Doc Comment
 *
 * @category Class
 * @package  Freee\Accounting
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UpdateCompanyParamsDocTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'updateCompanyParams_doc_template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice_layout' => 'int',
        'invoice_style' => 'int',
        'amount_fraction' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'invoice_layout' => null,
        'invoice_style' => null,
        'amount_fraction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_layout' => 'invoice_layout',
        'invoice_style' => 'invoice_style',
        'amount_fraction' => 'amount_fraction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_layout' => 'setInvoiceLayout',
        'invoice_style' => 'setInvoiceStyle',
        'amount_fraction' => 'setAmountFraction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_layout' => 'getInvoiceLayout',
        'invoice_style' => 'getInvoiceStyle',
        'amount_fraction' => 'getAmountFraction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_layout'] = isset($data['invoice_layout']) ? $data['invoice_layout'] : null;
        $this->container['invoice_style'] = isset($data['invoice_style']) ? $data['invoice_style'] : null;
        $this->container['amount_fraction'] = isset($data['amount_fraction']) ? $data['amount_fraction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['invoice_layout']) && ($this->container['invoice_layout'] > 5)) {
            $invalidProperties[] = "invalid value for 'invoice_layout', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['invoice_layout']) && ($this->container['invoice_layout'] < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_layout', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['invoice_style']) && ($this->container['invoice_style'] > 1)) {
            $invalidProperties[] = "invalid value for 'invoice_style', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['invoice_style']) && ($this->container['invoice_style'] < 0)) {
            $invalidProperties[] = "invalid value for 'invoice_style', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['amount_fraction']) && ($this->container['amount_fraction'] > 2)) {
            $invalidProperties[] = "invalid value for 'amount_fraction', must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['amount_fraction']) && ($this->container['amount_fraction'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount_fraction', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_layout
     *
     * @return int|null
     */
    public function getInvoiceLayout()
    {
        return $this->container['invoice_layout'];
    }

    /**
     * Sets invoice_layout
     *
     * @param int|null $invoice_layout レイアウト(0: レイアウト1, 1:レイアウト2, 3:封筒1, 4:レイアウト3(繰越金額欄あり), 5: 封筒2(繰越金額欄あり))
     *
     * @return $this
     */
    public function setInvoiceLayout($invoice_layout)
    {

        if (!is_null($invoice_layout) && ($invoice_layout > 5)) {
            throw new \InvalidArgumentException('invalid value for $invoice_layout when calling UpdateCompanyParamsDocTemplate., must be smaller than or equal to 5.');
        }
        if (!is_null($invoice_layout) && ($invoice_layout < 0)) {
            throw new \InvalidArgumentException('invalid value for $invoice_layout when calling UpdateCompanyParamsDocTemplate., must be bigger than or equal to 0.');
        }

        $this->container['invoice_layout'] = $invoice_layout;

        return $this;
    }

    /**
     * Gets invoice_style
     *
     * @return int|null
     */
    public function getInvoiceStyle()
    {
        return $this->container['invoice_style'];
    }

    /**
     * Sets invoice_style
     *
     * @param int|null $invoice_style スタイル(0: クラシック, 1: モダン)
     *
     * @return $this
     */
    public function setInvoiceStyle($invoice_style)
    {

        if (!is_null($invoice_style) && ($invoice_style > 1)) {
            throw new \InvalidArgumentException('invalid value for $invoice_style when calling UpdateCompanyParamsDocTemplate., must be smaller than or equal to 1.');
        }
        if (!is_null($invoice_style) && ($invoice_style < 0)) {
            throw new \InvalidArgumentException('invalid value for $invoice_style when calling UpdateCompanyParamsDocTemplate., must be bigger than or equal to 0.');
        }

        $this->container['invoice_style'] = $invoice_style;

        return $this;
    }

    /**
     * Gets amount_fraction
     *
     * @return int|null
     */
    public function getAmountFraction()
    {
        return $this->container['amount_fraction'];
    }

    /**
     * Sets amount_fraction
     *
     * @param int|null $amount_fraction 金額端数処理方法（0: 切り上げ、1: 切り捨て, 2: 四捨五入）
     *
     * @return $this
     */
    public function setAmountFraction($amount_fraction)
    {

        if (!is_null($amount_fraction) && ($amount_fraction > 2)) {
            throw new \InvalidArgumentException('invalid value for $amount_fraction when calling UpdateCompanyParamsDocTemplate., must be smaller than or equal to 2.');
        }
        if (!is_null($amount_fraction) && ($amount_fraction < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount_fraction when calling UpdateCompanyParamsDocTemplate., must be bigger than or equal to 0.');
        }

        $this->container['amount_fraction'] = $amount_fraction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


